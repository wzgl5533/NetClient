apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions{
        checkReleaseBuilds false
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1-alpha01'

    api "androidx.appcompat:appcompat:$appcompat_version"
    api 'androidx.multidex:multidex:2.0.0'

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //下面两个是RxJava RxAndroid Retrofit 共享给主app
    api 'io.reactivex.rxjava2:rxjava:2.1.13'
    api 'io.reactivex.rxjava2:rxandroid:2.0.2'

    api 'com.squareup.retrofit2:retrofit:2.4.0'
    api 'com.squareup.retrofit2:converter-gson:2.4.0'//转换器，请求结果转换成Model
    api 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    api 'com.squareup.retrofit2:retrofit-adapters:2.4.0'

    // eventbus
    api "org.greenrobot:eventbus:$eventbus_version"

    // io.socket
    api ('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }

    api "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    //
    api ("androidx.recyclerview:recyclerview:$recyclerview_version") {
        force = true
    }

    api "com.tbruyelle.rxpermissions2:rxpermissions:$rxpermissions_version"
}

//-----------------以下主要是开放源码及文档----------------------------//
// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
//    archives javadocJar
}

//打成jar包
task makeJar(type: Copy){
    delete 'build/libs/netclient.jar'//删除已经存在的jar包，如果有的话
    from('build/intermediates/packaged-classes/release/')//从该目录下加载要打包的文件，注意文件夹名称有可能为debug，也可能是release，自己看一下
    into('build/libs/')//jar包的保存目录
    include('classes.jar')//设置过滤，只打包classes文件
    rename('classes.jar', 'netclient.jar')//重命名，netclient.jar 名字自己随便起
}
makeJar.dependsOn(build)
